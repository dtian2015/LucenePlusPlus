#include "ContribInc.h"

#include "kuromoji/JapaneseAnalyzer.h"

#include "CJKWidthFilter.h"
#include "LowerCaseFilter.h"
#include "StopFilter.h"
#include "StringUtils.h"
#include "kuromoji/JapaneseBaseFormFilter.h"
#include "kuromoji/JapanesePartOfSpeechStopFilter.h"

namespace Lucene {
namespace Analysis {
namespace Ja {

JapaneseAnalyzer::JapaneseAnalyzer(LuceneVersion::Version matchVersion)
	: JapaneseAnalyzer(
		  matchVersion, nullptr, JapaneseTokenizer::DEFAULT_MODE, DefaultSetHolder::DEFAULT_STOP_SET, DefaultSetHolder::DEFAULT_STOP_TAGS)
{
}

JapaneseAnalyzer::JapaneseAnalyzer(
	LuceneVersion::Version matchVersion,
	Dict::UserDictionaryPtr userDict,
	JapaneseTokenizer::Mode mode,
	const HashSet<String>& stopwords,
	const HashSet<String>& stoptags)
	: StopwordAnalyzerBase(matchVersion, stopwords), _mode(mode), _stoptags(stoptags), _userDict(userDict)
{
}

HashSet<String> JapaneseAnalyzer::getDefaultStopSet()
{
	return DefaultSetHolder::DEFAULT_STOP_SET;
}

HashSet<String> JapaneseAnalyzer::getDefaultStopTags()
{
	return DefaultSetHolder::DEFAULT_STOP_TAGS;
}

ReusableAnalyzerBase::TokenStreamComponentsPtr JapaneseAnalyzer::createComponents(const String& fieldName, ReaderPtr reader)
{
	TokenizerPtr tokenizer = newLucene<JapaneseTokenizer>(reader, _userDict, true, _mode);
	TokenStreamPtr stream = newLucene<JapaneseBaseFormFilter>(tokenizer);
	stream = newLucene<JapanesePartOfSpeechStopFilter>(true, stream, _stoptags);
	stream = newLucene<Cjk::CJKWidthFilter>(stream);
	stream = newLucene<LowerCaseFilter>(stream);

	//	stream = std::make_shared<JapaneseKatakanaStemFilter>(stream);

	stream = newLucene<StopFilter>(StopFilter::getEnablePositionIncrementsVersionDefault(matchVersion), stream, stopwords);

	return newLucene<TokenStreamComponents>(tokenizer, stream);
}

// Generated from Ja stopwords.txt
const uint8_t JapaneseAnalyzer::DEFAULT_STOPWORD_FILE[] = {
	0xe3, 0x81, 0xae, 0x0a, 0xe3, 0x81, 0xab, 0x0a, 0xe3, 0x81, 0xaf, 0x0a, 0xe3, 0x82, 0x92, 0x0a, 0xe3, 0x81, 0x9f, 0x0a, 0xe3, 0x81,
	0x8c, 0x0a, 0xe3, 0x81, 0xa7, 0x0a, 0xe3, 0x81, 0xa6, 0x0a, 0xe3, 0x81, 0xa8, 0x0a, 0xe3, 0x81, 0x97, 0x0a, 0xe3, 0x82, 0x8c, 0x0a,
	0xe3, 0x81, 0x95, 0x0a, 0xe3, 0x81, 0x82, 0xe3, 0x82, 0x8b, 0x0a, 0xe3, 0x81, 0x84, 0xe3, 0x82, 0x8b, 0x0a, 0xe3, 0x82, 0x82, 0x0a,
	0xe3, 0x81, 0x99, 0xe3, 0x82, 0x8b, 0x0a, 0xe3, 0x81, 0x8b, 0xe3, 0x82, 0x89, 0x0a, 0xe3, 0x81, 0xaa, 0x0a, 0xe3, 0x81, 0x93, 0xe3,
	0x81, 0xa8, 0x0a, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0x97, 0xe3, 0x81, 0xa6, 0x0a, 0xe3, 0x81, 0x84, 0x0a, 0xe3, 0x82, 0x84, 0x0a, 0xe3,
	0x82, 0x8c, 0xe3, 0x82, 0x8b, 0x0a, 0xe3, 0x81, 0xaa, 0xe3, 0x81, 0xa9, 0x0a, 0xe3, 0x81, 0xaa, 0xe3, 0x81, 0xa3, 0x0a, 0xe3, 0x81,
	0xaa, 0xe3, 0x81, 0x84, 0x0a, 0xe3, 0x81, 0x93, 0xe3, 0x81, 0xae, 0x0a, 0xe3, 0x81, 0x9f, 0xe3, 0x82, 0x81, 0x0a, 0xe3, 0x81, 0x9d,
	0xe3, 0x81, 0xae, 0x0a, 0xe3, 0x81, 0x82, 0xe3, 0x81, 0xa3, 0x0a, 0xe3, 0x82, 0x88, 0xe3, 0x81, 0x86, 0x0a, 0xe3, 0x81, 0xbe, 0xe3,
	0x81, 0x9f, 0x0a, 0xe3, 0x82, 0x82, 0xe3, 0x81, 0xae, 0x0a, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0x84, 0xe3, 0x81, 0x86, 0x0a, 0xe3, 0x81,
	0x82, 0xe3, 0x82, 0x8a, 0x0a, 0xe3, 0x81, 0xbe, 0xe3, 0x81, 0xa7, 0x0a, 0xe3, 0x82, 0x89, 0xe3, 0x82, 0x8c, 0x0a, 0xe3, 0x81, 0xaa,
	0xe3, 0x82, 0x8b, 0x0a, 0xe3, 0x81, 0xb8, 0x0a, 0xe3, 0x81, 0x8b, 0x0a, 0xe3, 0x81, 0xa0, 0x0a, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x8c,
	0x0a, 0xe3, 0x81, 0xab, 0xe3, 0x82, 0x88, 0xe3, 0x81, 0xa3, 0xe3, 0x81, 0xa6, 0x0a, 0xe3, 0x81, 0xab, 0xe3, 0x82, 0x88, 0xe3, 0x82,
	0x8a, 0x0a, 0xe3, 0x81, 0x8a, 0xe3, 0x82, 0x8a, 0x0a, 0xe3, 0x82, 0x88, 0xe3, 0x82, 0x8a, 0x0a, 0xe3, 0x81, 0xab, 0xe3, 0x82, 0x88,
	0xe3, 0x82, 0x8b, 0x0a, 0xe3, 0x81, 0x9a, 0x0a, 0xe3, 0x81, 0xaa, 0xe3, 0x82, 0x8a, 0x0a, 0xe3, 0x82, 0x89, 0xe3, 0x82, 0x8c, 0xe3,
	0x82, 0x8b, 0x0a, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0x8a, 0xe3, 0x81, 0x84, 0xe3, 0x81, 0xa6, 0x0a, 0xe3, 0x81, 0xb0, 0x0a, 0xe3, 0x81,
	0xaa, 0xe3, 0x81, 0x8b, 0xe3, 0x81, 0xa3, 0x0a, 0xe3, 0x81, 0xaa, 0xe3, 0x81, 0x8f, 0x0a, 0xe3, 0x81, 0x97, 0xe3, 0x81, 0x8b, 0xe3,
	0x81, 0x97, 0x0a, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa4, 0xe3, 0x81, 0x84, 0xe3, 0x81, 0xa6, 0x0a, 0xe3, 0x81, 0x9b, 0x0a, 0xe3, 0x81,
	0xa0, 0xe3, 0x81, 0xa3, 0x0a, 0xe3, 0x81, 0x9d, 0xe3, 0x81, 0xae, 0xe5, 0xbe, 0x8c, 0x0a, 0xe3, 0x81, 0xa7, 0xe3, 0x81, 0x8d, 0xe3,
	0x82, 0x8b, 0x0a, 0xe3, 0x81, 0x9d, 0xe3, 0x82, 0x8c, 0x0a, 0xe3, 0x81, 0x86, 0x0a, 0xe3, 0x81, 0xae, 0xe3, 0x81, 0xa7, 0x0a, 0xe3,
	0x81, 0xaa, 0xe3, 0x81, 0x8a, 0x0a, 0xe3, 0x81, 0xae, 0xe3, 0x81, 0xbf, 0x0a, 0xe3, 0x81, 0xa7, 0xe3, 0x81, 0x8d, 0x0a, 0xe3, 0x81,
	0x8d, 0x0a, 0xe3, 0x81, 0xa4, 0x0a, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0x8a, 0xe3, 0x81, 0x91, 0xe3, 0x82, 0x8b, 0x0a, 0xe3, 0x81, 0x8a,
	0xe3, 0x82, 0x88, 0xe3, 0x81, 0xb3, 0x0a, 0xe3, 0x81, 0x84, 0xe3, 0x81, 0x86, 0x0a, 0xe3, 0x81, 0x95, 0xe3, 0x82, 0x89, 0xe3, 0x81,
	0xab, 0x0a, 0xe3, 0x81, 0xa7, 0xe3, 0x82, 0x82, 0x0a, 0xe3, 0x82, 0x89, 0x0a, 0xe3, 0x81, 0x9f, 0xe3, 0x82, 0x8a, 0x0a, 0xe3, 0x81,
	0x9d, 0xe3, 0x81, 0xae, 0xe4, 0xbb, 0x96, 0x0a, 0xe3, 0x81, 0xab, 0xe9, 0x96, 0xa2, 0xe3, 0x81, 0x99, 0xe3, 0x82, 0x8b, 0x0a, 0xe3,
	0x81, 0x9f, 0xe3, 0x81, 0xa1, 0x0a, 0xe3, 0x81, 0xbe, 0xe3, 0x81, 0x99, 0x0a, 0xe3, 0x82, 0x93, 0x0a, 0xe3, 0x81, 0xaa, 0xe3, 0x82,
	0x89, 0x0a, 0xe3, 0x81, 0xab, 0xe5, 0xaf, 0xbe, 0xe3, 0x81, 0x97, 0xe3, 0x81, 0xa6, 0x0a, 0xe7, 0x89, 0xb9, 0xe3, 0x81, 0xab, 0x0a,
	0xe3, 0x81, 0x9b, 0xe3, 0x82, 0x8b, 0x0a, 0xe5, 0x8f, 0x8a, 0xe3, 0x81, 0xb3, 0x0a, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x8c, 0xe3, 0x82,
	0x89, 0x0a, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0x8d, 0x0a, 0xe3, 0x81, 0xa7, 0xe3, 0x81, 0xaf, 0x0a, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa6,
	0x0a, 0xe3, 0x81, 0xbb, 0xe3, 0x81, 0x8b, 0x0a, 0xe3, 0x81, 0xaa, 0xe3, 0x81, 0x8c, 0xe3, 0x82, 0x89, 0x0a, 0xe3, 0x81, 0x86, 0xe3,
	0x81, 0xa1, 0x0a, 0xe3, 0x81, 0x9d, 0xe3, 0x81, 0x97, 0xe3, 0x81, 0xa6, 0x0a, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0xa8, 0xe3, 0x82, 0x82,
	0xe3, 0x81, 0xab, 0x0a, 0xe3, 0x81, 0x9f, 0xe3, 0x81, 0xa0, 0xe3, 0x81, 0x97, 0x0a, 0xe3, 0x81, 0x8b, 0xe3, 0x81, 0xa4, 0xe3, 0x81,
	0xa6, 0x0a, 0xe3, 0x81, 0x9d, 0xe3, 0x82, 0x8c, 0xe3, 0x81, 0x9e, 0xe3, 0x82, 0x8c, 0x0a, 0xe3, 0x81, 0xbe, 0xe3, 0x81, 0x9f, 0xe3,
	0x81, 0xaf, 0x0a, 0xe3, 0x81, 0x8a, 0x0a, 0xe3, 0x81, 0xbb, 0xe3, 0x81, 0xa9, 0x0a, 0xe3, 0x82, 0x82, 0xe3, 0x81, 0xae, 0xe3, 0x81,
	0xae, 0x0a, 0xe3, 0x81, 0xab, 0xe5, 0xaf, 0xbe, 0xe3, 0x81, 0x99, 0xe3, 0x82, 0x8b, 0x0a, 0xe3, 0x81, 0xbb, 0xe3, 0x81, 0xa8, 0xe3,
	0x82, 0x93, 0xe3, 0x81, 0xa9, 0x0a, 0xe3, 0x81, 0xa8, 0xe5, 0x85, 0xb1, 0xe3, 0x81, 0xab, 0x0a, 0xe3, 0x81, 0xa8, 0xe3, 0x81, 0x84,
	0xe3, 0x81, 0xa3, 0xe3, 0x81, 0x9f, 0x0a, 0xe3, 0x81, 0xa7, 0xe3, 0x81, 0x99, 0x0a, 0xe3, 0x81, 0xa8, 0xe3, 0x82, 0x82, 0x0a, 0xe3,
	0x81, 0xa8, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x8d, 0x0a, 0xe3, 0x81, 0x93, 0xe3, 0x81, 0x93, 0x0a};

// Generated from Ja stoptags.txt
const uint8_t JapaneseAnalyzer::DEFAULT_STOPTAGS_FILE[] = {
	0xe6, 0x8e, 0xa5, 0xe7, 0xb6, 0x9a, 0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9,
	0x9e, 0x2d, 0xe6, 0xa0, 0xbc, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe6, 0xa0, 0xbc,
	0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe6,
	0xa0, 0xbc, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe5, 0xbc, 0x95, 0xe7, 0x94, 0xa8, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e,
	0x2d, 0xe6, 0xa0, 0xbc, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe9, 0x80, 0xa3, 0xe8, 0xaa, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8,
	0xa9, 0x9e, 0x2d, 0xe6, 0x8e, 0xa5, 0xe7, 0xb6, 0x9a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e,
	0x2d, 0xe4, 0xbf, 0x82, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe5, 0x89, 0xaf, 0xe5,
	0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe9, 0x96, 0x93, 0xe6, 0x8a, 0x95, 0xe5, 0x8a, 0xa9,
	0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe4, 0xb8, 0xa6, 0xe7, 0xab, 0x8b, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9,
	0x9e, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe7, 0xb5, 0x82, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9,
	0xe8, 0xa9, 0x9e, 0x2d, 0xe5, 0x89, 0xaf, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0xef, 0xbc, 0x8f, 0xe4, 0xb8, 0xa6, 0xe7, 0xab, 0x8b,
	0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0xef, 0xbc, 0x8f, 0xe7, 0xb5, 0x82, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x0a, 0xe5, 0x8a, 0xa9,
	0xe8, 0xa9, 0x9e, 0x2d, 0xe9, 0x80, 0xa3, 0xe4, 0xbd, 0x93, 0xe5, 0x8c, 0x96, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe5,
	0x89, 0xaf, 0xe8, 0xa9, 0x9e, 0xe5, 0x8c, 0x96, 0x0a, 0xe5, 0x8a, 0xa9, 0xe8, 0xa9, 0x9e, 0x2d, 0xe7, 0x89, 0xb9, 0xe6, 0xae, 0x8a,
	0x0a, 0xe5, 0x8a, 0xa9, 0xe5, 0x8b, 0x95, 0xe8, 0xa9, 0x9e, 0x0a, 0xe8, 0xa8, 0x98, 0xe5, 0x8f, 0xb7, 0x0a, 0xe8, 0xa8, 0x98, 0xe5,
	0x8f, 0xb7, 0x2d, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0x0a, 0xe8, 0xa8, 0x98, 0xe5, 0x8f, 0xb7, 0x2d, 0xe8, 0xaa, 0xad, 0xe7, 0x82,
	0xb9, 0x0a, 0xe8, 0xa8, 0x98, 0xe5, 0x8f, 0xb7, 0x2d, 0xe5, 0x8f, 0xa5, 0xe7, 0x82, 0xb9, 0x0a, 0xe8, 0xa8, 0x98, 0xe5, 0x8f, 0xb7,
	0x2d, 0xe7, 0xa9, 0xba, 0xe7, 0x99, 0xbd, 0x0a, 0xe8, 0xa8, 0x98, 0xe5, 0x8f, 0xb7, 0x2d, 0xe6, 0x8b, 0xac, 0xe5, 0xbc, 0xa7, 0xe9,
	0x96, 0x8b, 0x0a, 0xe8, 0xa8, 0x98, 0xe5, 0x8f, 0xb7, 0x2d, 0xe6, 0x8b, 0xac, 0xe5, 0xbc, 0xa7, 0xe9, 0x96, 0x89, 0x0a, 0xe3, 0x81,
	0x9d, 0xe3, 0x81, 0xae, 0xe4, 0xbb, 0x96, 0x2d, 0xe9, 0x96, 0x93, 0xe6, 0x8a, 0x95, 0x0a, 0xe3, 0x83, 0x95, 0xe3, 0x82, 0xa3, 0xe3,
	0x83, 0xa9, 0xe3, 0x83, 0xbc, 0x0a, 0xe9, 0x9d, 0x9e, 0xe8, 0xa8, 0x80, 0xe8, 0xaa, 0x9e, 0xe9, 0x9f, 0xb3};

HashSet<String> JapaneseAnalyzer::DefaultSetHolder::DEFAULT_STOP_SET;
HashSet<String> JapaneseAnalyzer::DefaultSetHolder::DEFAULT_STOP_TAGS;

JapaneseAnalyzer::DefaultSetHolder::StaticConstructor::StaticConstructor()
{
	try
	{
		if (!DEFAULT_STOP_SET)
		{
			String stopWords(UTF8_TO_STRING(DEFAULT_STOPWORD_FILE));
			Collection<String> words(StringUtils::split(stopWords, L"\n"));
			DEFAULT_STOP_SET = HashSet<String>::newInstance(words.begin(), words.end());
		}

		if (!DEFAULT_STOP_TAGS)
		{
			String stopTags(UTF8_TO_STRING(DEFAULT_STOPTAGS_FILE));
			Collection<String> words(StringUtils::split(stopTags, L"\n"));
			DEFAULT_STOP_TAGS = HashSet<String>::newInstance(words.begin(), words.end());
		}
	}
	catch (const IOException& ex)
	{
		boost::throw_exception(RuntimeException(L"Unable to load default stopword or stoptag set"));
	}
}

JapaneseAnalyzer::DefaultSetHolder::StaticConstructor JapaneseAnalyzer::DefaultSetHolder::staticConstructor;
}
}
}
